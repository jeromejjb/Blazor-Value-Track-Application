@page "/stock/{Symbol}"
@using BlazorApp.Services

@inject IStockService StockService
@inject NavigationManager NavigationManager

<div class="stock-page">
    @if (isLoading)
    {
        <div class="loading-container">
            <div class="spinner"></div>
            <p>Loading stock data...</p>
        </div>
    }
    else if (error != null)
    {
        <div class="error-container">
            <h3>Error Loading Stock Data</h3>
            <p>@error</p>
            <button class="btn btn-primary" @onclick="@(() => NavigationManager.NavigateTo("/"))">Return to Dashboard</button>
        </div>
    }
    else if (stockData != null)
    {
        <div class="stock-header">
            <div class="stock-title">
                <h2>@Symbol</h2>
                <div class="price-container">
                    <h3>$@stockData.Price.ToString("F2")</h3>
                    <span class="@(stockData.Change >= 0 ? "change-positive" : "change-negative")">
                        @(stockData.Change >= 0 ? "+" : "")@stockData.Change.ToString("F2")
                        (@stockData.ChangePercent.ToString("F2")%)
                    </span>
                </div>
            </div>
        </div>

        <div class="chart-container">
            <h4>30-Day Price History</h4>
            <div class="price-chart">
                @{
                    var minPrice = stockData.HistoricalPrices.Min();
                    var maxPrice = stockData.HistoricalPrices.Max();
                    var priceRange = maxPrice - minPrice;
                    
                    @for (var i = 0; i < stockData.HistoricalPrices.Count; i++)
                    {
                        var height = ((stockData.HistoricalPrices[i] - minPrice) / priceRange * 100);
                        var left = (i / (float)(stockData.HistoricalPrices.Count - 1) * 100);
                        var isPositive = i > 0 && stockData.HistoricalPrices[i] >= stockData.HistoricalPrices[i-1];
                        
                        <div class="price-point @(isPositive ? "positive" : "negative")" 
                             style="left: @left%; height: @height%"
                             title="@stockData.HistoricalDates[i].ToShortDateString(): $@stockData.HistoricalPrices[i].ToString("F2")">
                        </div>
                    }
                }
            </div>
            <div class="chart-labels">
                <div class="price-range">
                    <span class="max-price">High: $@maxPrice.ToString("F2")</span>
                    <span class="min-price">Low: $@minPrice.ToString("F2")</span>
                </div>
                <div class="date-range">
                    <span>@stockData.HistoricalDates.First().ToShortDateString()</span>
                    <span>@stockData.HistoricalDates.Last().ToShortDateString()</span>
                </div>
            </div>
        </div>
    }
</div>

<style>
    .stock-page {
        padding: 20px;
        max-width: 1200px;
        margin: 0 auto;
    }

    .loading-container {
        display: flex;
        flex-direction: column;
        align-items: center;
        justify-content: center;
        min-height: 400px;
    }

    .spinner {
        width: 40px;
        height: 40px;
        border: 4px solid #f3f3f3;
        border-top: 4px solid #17BECF;
        border-radius: 50%;
        animation: spin 1s linear infinite;
        margin-bottom: 1rem;
    }

    @@keyframes spin {
        0% { transform: rotate(0deg); }
        100% { transform: rotate(360deg); }
    }

    .stock-header {
        background-color: #fff;
        border-radius: 12px;
        padding: 24px;
        margin-bottom: 24px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .stock-title {
        display: flex;
        justify-content: space-between;
        align-items: center;
    }

    .stock-title h2 {
        margin: 0;
        font-size: 2.5rem;
        font-weight: bold;
    }

    .price-container {
        text-align: right;
    }

    .price-container h3 {
        margin: 0;
        font-size: 2rem;
        font-weight: bold;
    }

    .change-positive {
        color: #28a745;
        font-size: 1.2rem;
        font-weight: 500;
    }

    .change-negative {
        color: #dc3545;
        font-size: 1.2rem;
        font-weight: 500;
    }

    .chart-container {
        background-color: #fff;
        border-radius: 12px;
        padding: 24px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .chart-container h4 {
        margin: 0 0 20px 0;
        color: #666;
    }

    .price-chart {
        position: relative;
        height: 300px;
        border-bottom: 1px solid #ddd;
        margin-bottom: 20px;
    }

    .price-point {
        position: absolute;
        bottom: 0;
        width: 3px;
        transition: all 0.3s ease;
    }

    .price-point.positive {
        background-color: #28a745;
    }

    .price-point.negative {
        background-color: #dc3545;
    }

    .price-point:hover {
        width: 5px;
        cursor: pointer;
        z-index: 2;
    }

    .chart-labels {
        display: flex;
        flex-direction: column;
        gap: 10px;
    }

    .price-range, .date-range {
        display: flex;
        justify-content: space-between;
        color: #666;
        font-size: 0.9rem;
    }

    .error-container {
        text-align: center;
        padding: 2rem;
        background-color: #fff;
        border-radius: 12px;
        box-shadow: 0 2px 4px rgba(0,0,0,0.1);
    }

    .error-container h3 {
        color: #dc3545;
        margin-bottom: 1rem;
    }

    .error-container button {
        margin-top: 1rem;
    }
</style>

@code {
    [Parameter]
    public string? Symbol { get; set; }

    private StockData? stockData;
    private string? error;
    private bool isLoading = true;

    protected override async Task OnInitializedAsync()
    {
        if (!string.IsNullOrEmpty(Symbol))
        {
            await LoadStockDataAsync();
        }
    }

    protected override async Task OnParametersSetAsync()
    {
        if (!string.IsNullOrEmpty(Symbol))
        {
            await LoadStockDataAsync();
        }
    }

    private async Task LoadStockDataAsync()
    {
        try
        {
            isLoading = true;
            error = null;
            stockData = await StockService.GetStockDataAsync(Symbol!);
        }
        catch (Exception ex)
        {
            error = ex.Message;
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }
} 